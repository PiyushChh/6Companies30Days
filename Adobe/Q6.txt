class Solution {
    public boolean isValid(int i,int j,int n){
        if(i<0 || j<0 || i>=n || j>=n){
            return false;
        }
        return true;
    }
    public double knightProbability(int n, int k, int row, int column) {
        double dp[][]=new double[n][n];
        double dp2[][]=new double[n][n];
        dp[row][column]=1;
        for(int ik=1;ik<=k;ik++){

            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if(dp[i][j]!=0){
                        int pi;
                        int pj;

                        pi=i-2;
                        pj=j+1;
                        if(isValid(pi,pj,n)){
                            dp2[pi][pj]+=dp[i][j]/8.0;
                        }

                        pi=i-1;
                        pj=j+2;
                        if(isValid(pi,pj,n)){
                            dp2[pi][pj]+=dp[i][j]/8.0;
                        }

                        pi=i+1;
                        pj=j+2;
                        if(isValid(pi,pj,n)){
                            dp2[pi][pj]+=dp[i][j]/8.0;
                        }

                        pi=i+2;
                        pj=j+1;
                        if(isValid(pi,pj,n)){
                            dp2[pi][pj]+=dp[i][j]/8.0;
                        }

                        pi=i+2;
                        pj=j-1;
                        if(isValid(pi,pj,n)){
                            dp2[pi][pj]+=dp[i][j]/8.0;
                        }

                        pi=i+1;
                        pj=j-2;
                        if(isValid(pi,pj,n)){
                            dp2[pi][pj]+=dp[i][j]/8.0;
                        }

                        pi=i-1;
                        pj=j-2;
                        if(isValid(pi,pj,n)){
                            dp2[pi][pj]+=dp[i][j]/8.0;
                        }

                        pi=i-2;
                        pj=j-1;
                        if(isValid(pi,pj,n)){
                            dp2[pi][pj]+=dp[i][j]/8.0;
                        }
                    }
                }
            }
            dp=dp2;
            dp2=new double[n][n];
        }
        double sum=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                sum+=dp[i][j];
            }
            System.out.println();
        }
        return sum;
    }
}
