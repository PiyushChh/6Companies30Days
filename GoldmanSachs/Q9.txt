class Solution {
    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {
        PriorityQueue<Integer> cap =new PriorityQueue<>(new Comparator<Integer>(){
            public int compare(Integer A,Integer B){
                return capital[A]-capital[B];
            }
        });
        PriorityQueue<Integer> prof=new PriorityQueue<>(profits.length,Collections.reverseOrder());
        for(int i=0;i<capital.length;i++){
            cap.offer(i);
        }
        
        for(int i=0;i<k;i++){
            while( !cap.isEmpty() && w>=capital[cap.peek()]){
                prof.offer(profits[cap.poll()]);
            }
            if(prof.size()==0){
                break;
            }
            w+=prof.poll();
            System.out.println(w);
            //k--;
        }
        return w;
    }
}
