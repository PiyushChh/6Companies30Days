class Solution {
    public int[] getBiggestThree(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                int l=j;
                int r=j;
                int d=i;
                while(l>=0 && r<n && d<m){
                    int ssum=calc(l,r,i,d,grid);
                    l-=1;
                    r+=1;
                    d+=2;
                    if(pq.size()<3){
                        if(!pq.contains(ssum)){
                            pq.offer(ssum);
                        }
                    }
                    else{
                        if(!pq.contains(ssum) && ssum>pq.peek()){
                            pq.remove();
                            pq.offer(ssum);
                        }
                    }
                }
            }
        }
        int ans[]=new int[pq.size()];
        for(int i=pq.size()-1;i>=0;i--){
            ans[i]=pq.remove();
        }
        return ans;
    }

    public int calc(int l,int r,int u,int d,int[][] grid){
            int c1=(l+r)/2;
            int c2=(l+r)/2;
            int ssum=0;
            boolean expand=true;
            for(int row=u;row<=d;row++){
                if(c1==c2){
                    ssum+=grid[row][c1];
                }
                else{
                    ssum+=grid[row][c1]+grid[row][c2];
                }
                if(c1==l){
                    expand=false;
                }
                if(expand){
                    c1-=1;
                    c2+=1;
                }
                else{
                    c1+=1;
                    c2-=1;
                }
            }
            return ssum;
    }
}
