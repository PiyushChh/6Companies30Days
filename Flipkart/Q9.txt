class Solution {
    static class Pair implements Comparable<Pair>{
        String word;
        int freq;
        Pair(String word,int freq){
            this.word=word;
            this.freq=freq;
        }
        public int compareTo(Pair o){
            if(this.freq==o.freq){
                if(this.word.compareTo(o.word)>0){
                    return -1;
                }
                else{
                    return 1;
                }
            }
            return this.freq-o.freq;
        }
    }
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String,Integer> map=new HashMap<>();
        for(int i=0;i<words.length;i++){
            String word=words[i];
            map.put(word,map.getOrDefault(word,0)+1);
        }
        System.out.println(map);
        List<String> ans=new ArrayList<>();

        PriorityQueue<Pair> pq=new PriorityQueue<>();

        for(String key:map.keySet()){
            int f=map.get(key);
             pq.add(new Pair(key,f));
            if(pq.size()>k){
                pq.remove();
               
            }
            else{
                //pq.add(new Pair(key,f));
            }
        }

        while(pq.size()!=0){
            Pair rm=pq.remove();
            ans.add(rm.word);
        }
        Collections.reverse(ans);

        return ans;

    }
}
