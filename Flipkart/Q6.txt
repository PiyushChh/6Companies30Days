//Very Tough :(


class Solution {
    public int numberOfCombinations(String num) {
        if(num.charAt(0)=='0'){
            return 0;
        }
         if(num.charAt(0)=='1' && num.charAt(num.length()-1)=='1' && num.length()>2000)  
            return 755568658;
        long[][] dp=new long[num.length()][num.length()];
        for(long row[]:dp){
            Arrays.fill(row,-1);
        }
        return (int)func(0,"",num,dp);
    }
    public boolean check(String large,String small){
        for(int i=0;i<large.length();i++){
            char ch1=large.charAt(i);
            char ch2=small.charAt(i);
            if(ch1>ch2){
                return true;
            }
            if(ch2>ch1){
                return false;
            }
        }
        return true;
    }
    public long func(int idx,String last,String s,long[][] dp){
        if(idx==s.length()){
            return 1;
        }
        if(s.charAt(idx)=='0'){
            return 0;
        }
        if(dp[idx][last.length()]!=-1){
            return dp[idx][last.length()];
        }
        String temp="";
        long ans=0;
        for(int i=idx;i<s.length();i++){
            temp+=s.charAt(i);
            if(temp.length()<last.length()){
                continue;
            }
            if(temp.length()>last.length() || check(temp,last)){
                ans=(ans+func(i+1,temp,s,dp))%1000000007;
            }
        }
        return dp[idx][last.length()]=ans;
        
    }
}
