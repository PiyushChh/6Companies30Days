class Solution {
     
     
    public static long numberOfPairs(int[] nums1, int[] nums2, int diff) {
       int nums[]=new int[nums1.length];
       for(int i=0;i<nums.length;i++){
           nums[i]=(nums1[i]-nums2[i]);

       }
      
       return mergeSort(nums,0,nums.length-1,diff);
     
    }
   
    public static long mergeSort(int[] nums,int l,int r,int dif){
        if(l>=r){
            return 0;
        }
        long res=0L;
        
        int mid=l+(r-l)/2;

        res+=mergeSort(nums,l,mid,dif);
        res+=mergeSort(nums,mid+1,r,dif);
        
        res+=merge(nums,l,r,mid,dif);
        return res;
    }
    public static long merge(int[] nums,int l,int r,int mid,int dif){
        long res=0L;
        int i=l,j=mid+1;
        while(i<=mid && j<=r){
            if(nums[i]<=(nums[j]+dif)){
                res+=(r-j+1);
                i++;
            }
            else{
                j++;
            }
        }
        int ans[]=new int[nums.length];
        i=l;
        j=mid+1;
        int k=l;
        while(i<=mid && j<=r){


            if(nums[i]<=nums[j]){
                ans[k]=nums[i];
                k++;
                i++;
            }
            else{
                ans[k]=nums[j];
                j++;
                k++;
            }
        }
        while(i<=mid){
            ans[k]=nums[i];
            i++;
            k++;
        }
        while(j<=r){
            ans[k]=nums[j];
            j++;
            k++;
        }
        
        for(i=l;i<=r;i++){
            nums[i]=ans[i];
        }
        return res;
    }
}
