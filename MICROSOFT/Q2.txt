Q216. Combination Sum III
Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.



Intuition
Either we'll add the element to sos or will not add it
So first func call is include
And the second function call is exclude
In include-we add it to li
In exclude-we remove the last element from li
And we check if sos==target
Now we check if the number of elements is k then we add it to the final answer.

Approach
recursion

Code
class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        int arr[]=new int[9];
        for(int i=0;i<9;i++){
            arr[i]=i+1;
        }
        List<List<Integer>> ans=new ArrayList<>();
        List<Integer> li=new ArrayList<>();
        func(arr,0,n,0,ans,li,k);
        return ans;
    }

    static void func(int[] arr,int idx,int tar,int sos,List<List<Integer>> ans,List<Integer> li,int k){
        if(sos==tar){
            if(ans.contains(li)==false){
                if(li.size()==k)
            ans.add(new ArrayList<>(li));
            }
            return;
        }
        if(idx>=arr.length || sos>tar || arr[idx]>tar){
            return;
        }

        li.add(arr[idx]);
        func(arr,idx+1,tar,sos+arr[idx],ans,li,k);
        li.remove(li.size()-1);

        func(arr,idx+1,tar,sos,ans,li,k);
    }
}
